if &compatible
  set nocompatible
endif

function! PackInit() abort
  packadd minpac

  call minpac#init()

  " minpac must have {'type': 'opt'} so that it can be loaded with `packadd`.
  call minpac#add('k-takata/minpac', {'type': 'opt'})

  " Add other plugins here.
  call minpac#add('0xBADDCAFE/midnight.vim')
  call minpac#add('Donearm/Ubaryd')
  call minpac#add('ap/vim-css-color')
  call minpac#add('arcticicestudio/nord-vim')
  call minpac#add('arnaud-lb/vim-php-namespace')
  call minpac#add('ctrlpvim/ctrlp.vim')
  call minpac#add('dense-analysis/ale')
  call minpac#add('dhruvasagar/vim-table-mode')
  call minpac#add('editorconfig/editorconfig-vim')
  call minpac#add('glidenote/memolist.vim')
  call minpac#add('haya14busa/vim-asterisk')
  call minpac#add('haya14busa/vim-auto-programming')
  call minpac#add('hrsh7th/vim-vsnip')
  call minpac#add('hrsh7th/vim-vsnip-integ')
  call minpac#add('itchyny/vim-parenmatch')
  call minpac#add('jonathanfilip/vim-lucius')
  call minpac#add('justinmk/vim-dirvish')
  call minpac#add('kana/vim-better-tag-jump')
  call minpac#add('kana/vim-operator-user')
  call minpac#add('kana/vim-tabpagecd')
  call minpac#add('kana/vim-textobj-user')
  call minpac#add('koron/codic-vim')
  call minpac#add('koron/nyancat-vim')
  call minpac#add('lucapette/vim-textobj-underscore')
  call minpac#add('mattn/ctrlp-matchfuzzy')
  call minpac#add('mattn/emmet-vim')
  call minpac#add('mattn/sonictemplate-vim')
  call minpac#add('mattn/vim-ale-icons')
  call minpac#add('mattn/vim-goimports')
  " call minpac#add('mattn/vim-lexiv')
  call minpac#add('mattn/vim-lsp-icons')
  call minpac#add('mattn/vim-lsp-settings')
  call minpac#add('mattn/vim-prompter')
  call minpac#add('mattn/webapi-vim')
  call minpac#add('osyo-manga/vim-anzu')
  call minpac#add('osyo-manga/vim-textobj-multiblock')
  call minpac#add('prabirshrestha/async.vim')
  call minpac#add('prabirshrestha/asyncomplete-lsp.vim')
  call minpac#add('prabirshrestha/asyncomplete.vim')
  call minpac#add('prabirshrestha/vim-lsp')
  call minpac#add('rickhowe/diffchar.vim')
  call minpac#add('ryym/operator-camelize.vim')
  call minpac#add('tacahiroy/ctrlp-funky')
  call minpac#add('thinca/vim-qfreplace')
  call minpac#add('thinca/vim-quickrun')
  call minpac#add('tpope/vim-fugitive')
  call minpac#add('tyru/caw.vim')
  call minpac#add('vim-airline/vim-airline')
  call minpac#add('vim-airline/vim-airline-themes')
  call minpac#add('vim-jp/syntax-vim-ex')
  call minpac#add('w0ng/vim-hybrid')
  call minpac#add('whatyouhide/vim-gotham')
endfunction

" Load the plugins in pack/minpac/start directory right now.
packloadall

" plugin_setting_template {{{
" if !empty(globpath(&rtp, 'autoload/ale.vim'))
"   let g:variable = 0
" endif
" }}}

" standard plugins {{{
if !exists('loaded_matchit')
  " enable matchit
  runtime macros/matchit.vim
endif
" }}}
" minpac {{{
command! PackUpdate source $MYVIMRC | call PackInit() | call minpac#update()
command! PackClean  source $MYVIMRC | call PackInit() | call minpac#clean()
command! PackStatus packadd minpac | call minpac#status()
" }}}
" ale {{{
if !empty(globpath(&rtp, 'autoload/ale.vim'))
  let g:ale_linters = {
        \   'go': ['gopls', 'gofmt'],
        \   'java': [],
        \   'kotlin': [],
        \}
  let g:ale_fixers = {
        \   '*': ['remove_trailing_lines', 'trim_whitespace'],
        \   'javascript': ['prettier'],
        \   'typescript': ['prettier'],
        \   'javascriptreact': ['prettier'],
        \   'typescriptreact': ['prettier'],
        \   'css': ['prettier'],
        \   'php': ['prettier'],
        \}
  " let g:ale_fixers['javascript'] = ['prettier-eslint']
  " let g:ale_fixers['typescript'] = ['tslint']

  let g:ale_lint_on_text_changed = 'normal'
  let g:ale_fix_on_save = 0
  nmap <Space>l <Plug>(ale_fix)

  let g:ale_pattern_options = {
        \   '.*\.json$': {'ale_enabled': 0},
        \   '.*node_modules/.*': {'ale_enabled': 0},
        \}

  let g:ale_javascript_prettier_use_local_config = 1
  let g:ale_completion_tsserver_autoimport = 1
  " let g:ale_php_phpcbf_standard = 'PSR1,PSR2'
endif
" }}}
" vim-anzu {{{
if !empty(globpath(&rtp, 'autoload/anzu.vim'))
  nmap * <Plug>(asterisk-z*)<Plug>(anzu-n)
  nmap # <Plug>(asterisk-z#)<Plug>(anzu-n)
  vmap * <Plug>(asterisk-z*)<Plug>(anzu-n)
  vmap # <Plug>(asterisk-z#)<Plug>(anzu-n)

  let g:anzu_status_format = "(%i/%l) %w"

  augroup AnzuLoading
    autocmd!
    autocmd BufLeave * AnzuClearSearchStatus
  augroup END
endif
" }}}
" asyncomplete {{{
if !empty(globpath(&rtp, 'autoload/asyncomplete.vim'))
  " let g:asyncomplete_auto_completeopt = 0
  imap <nul> <c-space>
  imap <c-space> <Plug>(asyncomplete_force_refresh)
endif
" }}}
" vim-lsp {{{
if !empty(globpath(&rtp, 'autoload/lsp.vim'))
  function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=number
    " nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> <f2> <plug>(lsp-rename)
    nmap <buffer> K <plug>(lsp-hover)
    " refer to doc to add more commands
  endfunction

  augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END

  let g:lsp_diagnostics_enabled = 0         " disable diagnostics support
  " let g:lsp_diagnostics_echo_cursor = 0
  " let g:lsp_highlight_references_enabled = 0
endif
" }}}
" vim-lsp-settings {{{
" let g:lsp_settings = {}
" let g:lsp_settings['gopls'] = {
"     \  'workspace_config': {
"     \    'usePlaceholders': v:true,
"     \    'analyses': {
"     \      'fillstruct': v:true,
"     \    },
"     \  },
"     \  'initialization_options': {
"     \    'usePlaceholders': v:true,
"     \    'analyses': {
"     \      'fillstruct': v:true,
"     \    },
"     \  },
"     \}
" }}}
" vim-parenmatch {{{
if !empty(globpath(&rtp, 'autoload/parenmatch.vim'))
  let g:loaded_matchparen = 1
endif
" }}}
" ctrlp{{{
if !empty(globpath(&rtp, 'autoload/ctrlp.vim'))
  let g:ctrlp_cmd = 'CtrlPMRUFiles'
  exe 'nn <silent> <plug>(ctrlp) :<c-u>'.g:ctrlp_cmd.'<cr>'
  " The maximum number of files to scan, set to 0 for no limit: >
  " let g:ctrlp_max_files = 1000
  " Set this to 0 to show the match window at the top of the screen: >
  let g:ctrlp_match_window_bottom = 1
  " Change the listing order of the files in the match window. The default setting
  " (1) is from bottom to top: >
  let g:ctrlp_match_window_reversed = 0
  let g:ctrlp_max_height = 16
  " let g:ctrlp_max_files = 3000
  let g:ctrlp_clear_cache_on_exit = 0
  " has migemo?
  if executable('CMigemo')
    let g:ctrlp_use_migemo = 1
  endif
  " let g:ctrlp_extensions = ['mixed']
  let g:ctrlp_prompt_mappings = {
        \ 'PrtSelectMove("j")':   ['<C-j>', '<tab>', '<down>'],
        \ 'PrtSelectMove("k")':   ['<C-k>', '<s-tab>', '<up>'],
        \ 'ToggleFocus()':        ['<NOP>'],
        \ 'PrtExpandDir()':       ['<NOP>'],
        \ }

  " funky{{{
  nnoremap <F11> :CtrlPFunky<CR>
  let g:ctrlp_funky_syntax_highlight = 1
  " }}}
  " ctrlp-matchfuzzy {{{
  if !empty(globpath(&rtp, 'autoload/ctrlp_matchfuzzy.vim'))
    let g:ctrlp_match_func = {'match': 'ctrlp_matchfuzzy#matcher'}
  endif
  " }}}
endif
" }}}
" restart {{{
if !empty(globpath(&rtp, 'autoload/restart.vim'))
  " if enable restart session, leave session files in
  " current dir...
  " let g:restart_sessionoptions=&sessionoptions
  let g:restart_sessionoptions="winsize,winpos"
endif
" }}}
" airline {{{
if !empty(globpath(&rtp, 'autoload/airline.vim'))
  let g:airline_detect_iminsert=1
  if &encoding ==# 'utf-8'
    if has('mac')
      let g:airline_left_sep = '‚ÆÄ'
      let g:airline_left_alt_sep = '‚ÆÅ'
      let g:airline_right_sep = '‚ÆÇ'
      let g:airline_right_alt_sep = '‚ÆÉ'

      if !exists('g:airline_symbols')
        let g:airline_symbols = {}
      endif

      " {'space': ' ', 'paste': 'PASTE', 'maxlinenr': ' ÓÇ°', 'notexists': '…Ü', 'linenr': '‚ò∞ ', 'readonly': 'ÓÇ¢', 'spell': 'SPELL', 'modified': '+', 'keymap': 'Keymap:', 'crypt': 'üîí ', 'branch': 'ÓÇ†', 'whitespace': '‚ò≤'}

      let g:airline_symbols.maxlinenr    = ' ‚≠°'
      let g:airline_symbols.readonly  = '‚≠§'
      let g:airline_symbols.branch    = '‚≠†'
    else
      let g:airline_left_sep = 'ÓÇ∞'
      let g:airline_left_alt_sep = 'ÓÇ±'
      let g:airline_right_sep = 'ÓÇ≤'
      let g:airline_right_alt_sep = 'ÓÇ≥'
    endif
  endif

  " let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#whitespace#checks = []
endif
" }}}
" textobj-multiblock {{{
if !empty(globpath(&rtp, 'autoload/textobj/multiblock.vim'))
  omap ab <Plug>(textobj-multiblock-a)
  omap ib <Plug>(textobj-multiblock-i)
  vmap ab <Plug>(textobj-multiblock-a)
  vmap ib <Plug>(textobj-multiblock-i)
endif
" }}}
" operator-camelize {{{
if !empty(globpath(&rtp, 'autoload/operator/camelize.vim'))
  map <Space>c <Plug>(operator-toggle-camel-snake)
endif
" }}}
" memolist.vim {{{
if !empty(globpath(&rtp, 'autoload/memolist.vim'))
  nmap m, :exe "CtrlP" g:memolist_path<cr><f5>
endif
" }}}
" vim-quickrun {{{
if !empty(globpath(&rtp, 'autoload/quickrun.vim'))
  " let g:quickrun_config = {}
  " TODO: install openbrowser.vim
  " let g:quickrun_config.markdown = {
  "       \ 'type'      : 'markdown/pandoc',
  "       \ 'outputter' : 'browser',
  "       \ 'cmdopt'    : '-s'
  "       \ }
  " remap exec commands
  map <Leader>rr <Plug>(quickrun)
  nnoremap <Leader>ri :<C-u>QuickRun -mode n -input input<CR>
endif
" }}}
" phpcomplete {{{
if !empty(globpath(&rtp, 'autoload/phpcomplete.vim'))
  let g:phpcomplete_index_composer_command='composer'
endif
" }}}
" vim-php-namespace {{{
if !empty(globpath(&rtp, 'plugin/phpns.vim'))
  function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
  endfunction
  autocmd vimrc_loading FileType php inoremap <Leader>u <Esc>:call IPhpInsertUse()<CR>
  autocmd vimrc_loading FileType php noremap <Leader>u :call PhpInsertUse()<CR>
endif
" }}}
" autoprogramming {{{
if !empty(globpath(&rtp, 'autoload/autoprogramming.vim'))
  set completefunc=autoprogramming#complete
endif
" }}}
" dirvish {{{
if !empty(globpath(&rtp, 'autoload/dirvish.vim'))
  autocmd vimrc_loading FileType dirvish keeppatterns g@\v/\.[^\/]+/?$@d
endif
" }}}
" table mode {{{
if !empty(globpath(&rtp, 'autoload/tablemode.vim'))
  let g:table_mode_corner="|"
endif
" }}}

" Settings that require the plugin to be loaded first
" colorschemes{{{
" TODO: separate settings by g:colors_name value.
if has('gui_running')
  if !empty(globpath(&rtp, 'colors/lucius.vim'))
    colorscheme lucius
  endif
else
  if !empty(globpath(&rtp, 'colors/gotham.vim'))
    if exists('+termguicolors')
      autocmd vimrc_loading VimEnter,ColorScheme * highlight Normal guibg=NONE
      autocmd vimrc_loading VimEnter,ColorScheme * highlight NonText guibg=NONE
      autocmd vimrc_loading VimEnter,ColorScheme * highlight TablineSel guibg=NONE

      autocmd vimrc_loading VimEnter * highlight Tabline guibg=#195466
      autocmd vimrc_loading VimEnter * highlight TablineFill guibg=#195466
      autocmd vimrc_loading ColorScheme gotham highlight Tabline guibg=#195466
      autocmd vimrc_loading ColorScheme gotham highlight TablineFill guibg=#195466

      colorscheme gotham
    else
      autocmd vimrc_loading VimEnter,ColorScheme * highlight Normal ctermbg=NONE
      autocmd vimrc_loading VimEnter,ColorScheme * highlight NonText ctermbg=NONE
      autocmd vimrc_loading VimEnter,ColorScheme * highlight TablineSel ctermbg=NONE

      autocmd vimrc_loading VimEnter * highlight Tabline ctermbg=24
      autocmd vimrc_loading VimEnter * highlight TablineFill ctermbg=24
      autocmd vimrc_loading ColorScheme gotham256 highlight Tabline ctermbg=24
      autocmd vimrc_loading ColorScheme gotham256 highlight TablineFill ctermbg=24

      colorscheme gotham256
    endif
  endif
endif
" }}}

" vim: ft=vim:et:sw=2:sts=2:fdm=marker :
